package main

import (
	"bytes"
	"time"
)

func (s *Struct) GenerateMockRepository() string {
	s.CreatedDate = time.Now()
	buf := bytes.Buffer{}
	template := newTemplate(`// This file is generated by Manee.
// {{.CreatedDate}}
package {{.NameLowercase}}

import "{{.ImportPath}}"

type Mock{{.Name}}Repository struct {
}
{{.MockSelectAllTemplate}}
{{.MockSelectTemplate}}
{{.MockInsertTemplate}}
{{.MockUpdateTemplate}}
{{.MockDeleteTemplate}}

`)
	template.Execute(&buf, s)
	return buf.String()
}

func (s *Struct) MockInsertTemplate() string {
	buf := bytes.Buffer{}
	template := newTemplate(`
func (d *Mock{{.Name}}Repository) {{.InsertMethodSignature}} {
	return nil, nil
}`)
	template.Execute(&buf, s)
	return buf.String()
}

func (s *Struct) MockUpdateTemplate() string {
	buf := bytes.Buffer{}
	template := newTemplate(`
func (d *Mock{{.Name}}Repository) {{.UpdateMethodSignature}} {
	return nil, nil
}`)
	template.Execute(&buf, s)
	return buf.String()
}

func (s *Struct) MockDeleteTemplate() string {
	buf := bytes.Buffer{}
	template := newTemplate(`
func (d *Mock{{.Name}}Repository) {{.DeleteMethodSignature}} {
	return nil, nil
}`)
	template.Execute(&buf, s)
	return buf.String()
}

func (s *Struct) MockSelectTemplate() string {
	buf := bytes.Buffer{}
	template := newTemplate(`
func (d *Mock{{.Name}}Repository) {{.SelectSingleMethodSignature}} {
	return nil, nil
}`)
	template.Execute(&buf, s)
	return buf.String()
}

func (s *Struct) MockSelectAllTemplate() string {
	buf := bytes.Buffer{}
	template := newTemplate(`
func (d *Mock{{.Name}}Repository) {{.SelectAllMethodSignature}} {
	
	return nil, nil
}`)
	template.Execute(&buf, s)
	return buf.String()
}
